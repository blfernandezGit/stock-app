 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/cashes", type: :request do
  before(:each) do
    sign_in create(:user)
  end

  # let(:invalid_attributes) {
  #   {last_cash_in_amt: -1}
  # }

  describe "GET /edit" do
    it "render a successful response" do
      cash = create :cash
      get cash_in_edit_path(cash)
      expect(response).to be_successful
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       {last_cash_in_amt: 1}
  #     }

  #     it "updates the requested cash" do
  #       cash = create :cash
  #       post cash_in_update_path(cash), params: { cash: new_attributes, format: :html }
  #       cash.reload
  #       expect(response).to be_successful
  #     end

  #     it "redirects to inventories" do
  #       cash = create :cash
  #       post cash_in_update_path(cash), params: { cash: new_attributes, format: :html }
  #       cash.reload
  #       expect(response).to redirect_to(inventories_path)
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       cash = create :cash
  #       post cash_in_update_path(cash), params: { cash: invalid_attributes, format: :html }
  #       expect(response).to be_successful
  #     end
  #   end
  end
end
