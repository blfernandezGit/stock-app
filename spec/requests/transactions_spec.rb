 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do
  before(:each) do
    Stock.destroy_all
    sign_in create(:user)
    Cash.last.update(balance: 1000)
  end

  let(:valid_attributes) {
    {
      quantity: 1,
      transaction_type: 'Buy',
      stock_id: Stock.last.id,
      unit_price: Stock.last.price,
      user: User.last.id
    }
  }

  let(:invalid_attributes) {
    {
      quantity: -1,
      transaction_type: 'Buy',
      stock_id: Stock.last.id,
      unit_price: Stock.last.price,
      user: User.last.id
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      create :transaction
      get transactions_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      stock = create :stock
      get new_transaction_url(:transaction_type => "Sell", :stock_id => stock.id, :price => stock.price)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before(:each) do
      create :stock
    end
    context "with valid parameters" do
      it "creates a new Transaction" do
        expect {
          post transactions_url, params: { transaction: valid_attributes }
        }.to change(Transaction, :count).by(1)
      end

      it "redirects to inventories" do
        post transactions_url, params: { transaction: valid_attributes }
        expect(response).to redirect_to(inventories_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Transaction" do
        expect {
          post transactions_url, params: { transaction: invalid_attributes }
        }.to change(Transaction, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post transactions_url, params: { transaction: invalid_attributes }
        expect(response).to redirect_to(new_transaction_url(:transaction_type => invalid_attributes[:transaction_type], :stock_id => invalid_attributes[:stock_id], :price => invalid_attributes[:unit_price]))
      end
    end
  end
end
